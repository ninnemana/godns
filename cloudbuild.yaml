steps:
- id: go_linter
  name: "golangci/golangci-lint"
  args: ["golangci-lint","run", "--deadline", "5m0s"]
- id: go_test
  name: "gcr.io/cloud-builders/go"
  args: ["test","."]
  env: ["GOPATH=."]
- id: go_security
  name: "securego/gosec"
  args: ["."]
  env: ["GOPATH=."]
- name: gcr.io/cloud-builders/docker
  args: [
    'build', 
    '-t', 
    'gcr.io/$PROJECT_ID/godns:$SHORT_SHA', 
    '-f',
    'Dockerfile',
    '.'
  ]
- name: gcr.io/cloud-builders/docker
  args: [
    'build', 
    '-t', 
    'gcr.io/$PROJECT_ID/godns-arm:$SHORT_SHA', 
    '-f',
    'Dockerfile.arm',
    '.'
  ]
- name: gcr.io/cloud-builders/docker
  entrypoint: 'bash'
  args:
    - '-c'
    - '[[ "$BRANCH_NAME" == "master" ]] && docker tag gcr.io/$PROJECT_ID/godns-arm:$SHORT_SHA gcr.io/$PROJECT_ID/godns-arm:latest || return 0'
- name: gcr.io/cloud-builders/docker
  entrypoint: 'bash'
  args:
    - '-c'
    - '[[ "$BRANCH_NAME" == "master" ]] && docker tag gcr.io/$PROJECT_ID/godns:$SHORT_SHA gcr.io/$PROJECT_ID/godns:latest || return 0'
- name: gcr.io/cloud-builders/docker
  entrypoint: 'bash'
  args:
    - '-c'
    - '[[ "$BRANCH_NAME" == "master" ]] && docker push gcr.io/$PROJECT_ID/godns || return 0'
  